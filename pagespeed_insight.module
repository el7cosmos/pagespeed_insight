<?php

/**
 * @file
 * The PageSpeed Insights module.
 */

/**
 * Implements hook_menu().
 */
function pagespeed_insight_menu() {
  $items = array();
  $items['pagespeed-insight'] = array(
    'title' => 'PageSpeed Insights',
    'page callback' => 'pagespeed_insight_page',
    'access callback' => TRUE,
    'file' => 'pagespeed_insight.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function pagespeed_insight_theme($existing, $type, $theme, $path) {
  return array(
    'pagespeed_insight_score' => array(
      'variables' => array(
        'score' => NULL,
      ),
    ),
    'pagespeed_insight_stats' => array(
      'variables' => array(
        'stats' => NULL,
        'data_stats' => NULL,
      ),
    ),
    'pagespeed_insight_rule' => array(
      'variables' => array(
        'rule' => NULL,
      ),
    ),
    'pagespeed_insight_header' => array(
      'variables' => array(
        'header' => NULL,
      ),
    ),
    'pagespeed_insight_result' => array(
      'variables' => array(
        'result' => NULL,
      ),
    ),
  );
}

function pagespeed_insight_analyze($url) {
  $api_url = 'https://www.googleapis.com/pagespeedonline/v1/runPagespeed';
  $query = array(
    'key' => variable_get('pagespeed_insight_api_key'),
    'prettyprint' => 'false',
    'url' => $url,
    'locale' => $GLOBALS['language']->language,
  );

  $response = drupal_http_request(url($api_url, array('query' => $query)));
  return drupal_json_decode($response->data);
}

function pagespeed_insight_analyze_form($form, &$form_state) {
  $url = empty($_GET['url']) ? NULL : $_GET['url'];

  $form['url'] = array(
    '#type' => 'urlfield',
    '#title' => 'URL',
    '#description' => t('The results are cached for 30s. If you have made changes to your page, please wait for 30s before re-running the test.'),
    '#default_value' => $url,
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Enter a web page URL'),
    ),
    '#element_validate' => array(
      'pagespeed_insight_analyze_form_url_validate',
    ),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Analyze'),
    '#ajax' => array(
      'callback' => 'pagespeed_insight_analyze_form_submit_ajax',
      'wrapper' => 'block-system-main',
      'effect' => 'fade',
      'event' => 'click',
      'method' => 'html',
    ),
  );

  $form['#attached']['js'][] = libraries_get_path('Chart.js') . '/Chart.js';

  return $form;
}

function pagespeed_insight_analyze_form_url_validate($element, &$form_state, $form) {
  $value = $element['#value'];
  if (!valid_url($value, TRUE)) {
    $element['#value'] = 'http://' . $value;
    $form_state['values']['url'] = 'http://' . $value;
    elements_validate_url($element, $form_state);
  }
}

function pagespeed_insight_analyze_form_submit($form, &$form_state) {
  $form_state['redirect'] = array(
    'pagespeed-insight',
    array(
      'query' => array('url' => $form_state['values']['url']),
    ),
  );
}

function pagespeed_insight_analyze_form_submit_ajax($form, &$form_state) {
  if (form_get_errors()) {
    return $form;
  }
  else {
    $form_state['rebuild'] = TRUE;
    $url = $form_state['values']['url'];

    $cache = cache_get('pagespeed_insight:' . $url);
    if ($cache && $cache->expire > REQUEST_TIME) {
      $data = $cache->data;
    }
    else {
      $data = pagespeed_insight_analyze($url);
    }

    if (isset($data['error'])) {
      $commands = array(
        ajax_command_html('#block-system-main', drupal_render($form)),
        ajax_command_alert($data['error']['message']),
      );
    }
    else {
      cache_set('pagespeed_insight:' . $url, $data, 'cache', REQUEST_TIME + 30);

      $result = pagespeed_insight_analyze_result($data);
      $commands = array(
        ajax_command_html('#block-system-main', drupal_render($form)),
        ajax_command_after('#pagespeed-insight-analyze-form', drupal_render($result)),
      );
    }

    return array('#type' => 'ajax', '#commands' => $commands);
  }
}

function pagespeed_insight_analyze_result($data) {
  $result['score'] = array(
    '#theme' => 'pagespeed_insight_score',
    '#score' => $data['score'],
  );

  $stats = array();

  if (!empty($data['pageStats']['htmlResponseBytes'])) {
    $stats[] = array(
      'value' => intval($data['pageStats']['htmlResponseBytes']),
      'color' => '#428bca',
    );
  }
  if (!empty($data['pageStats']['cssResponseBytes'])) {
    $stats[] = array(
      'value' => intval($data['pageStats']['cssResponseBytes']),
      'color' => '#5cb85c',
    );
  }
  if (!empty($data['pageStats']['imageResponseBytes'])) {
    $stats[] = array(
      'value' => intval($data['pageStats']['imageResponseBytes']),
      'color' => '#f0ad4e',
    );
  }
  if (!empty($data['pageStats']['javascriptResponseBytes'])) {
    $stats[] = array(
      'value' => intval($data['pageStats']['javascriptResponseBytes']),
      'color' => '#d9534f',
    );
  }
  if (!empty($data['pageStats']['flashResponseBytes'])) {
    $stats[] = array(
      'value' => intval($data['pageStats']['flashResponseBytes']),
      'color' => '#333333',
    );
  }
  if (!empty($data['pageStats']['textResponseBytes'])) {
    $stats[] = array(
      'value' => intval($data['pageStats']['textResponseBytes']),
      'color' => '#d9534f',
    );
  }
  if (!empty($data['pageStats']['otherResponseBytes'])) {
    $stats[] = array(
      'value' => intval($data['pageStats']['otherResponseBytes']),
      'color' => '#999999',
    );
  }

  $result['stats'] = array(
    '#theme' => 'pagespeed_insight_stats',
    '#stats' => $data['pageStats'],
    '#data_stats' => drupal_json_encode($stats),
  );

  $rules = $data['formattedResults']['ruleResults'];
  uasort($rules, 'pagespeed_insight_analyze_compare_rules');
  foreach ($rules as $id => $rule) {
    $result['rules'][$id] = array(
      '#theme' => 'pagespeed_insight_rule',
      '#rule' => $rule,
    );
  }

  return $result;
}

function pagespeed_insight_analyze_compare_rules($a, $b) {
  if ($a['ruleImpact'] == $b['ruleImpact']) {
    return 0;
  }
  return ($a['ruleImpact'] < $b['ruleImpact']) ? 1 : -1;
}
